{"version":3,"sources":["js/03-promises.js"],"names":["formEl","document","querySelector","buttonEl","delay","step","amount","createPromise","position","shouldResolve","Math","random","promise","Promise","resolve","reject","setTimeout","onFormSubmit","evt","preventDefault","elements","currentTarget","formSubmitObj","value","alert","reset","console","log","then","catch","addEventListener"],"mappings":";AAEA,MAAMA,EAASC,SAASC,cAAc,SAChCC,EAAWF,SAASC,cAAc,mBAClCE,EAAQH,SAASC,cAAc,kBAC/BG,EAAOJ,SAASC,cAAc,iBAC9BI,EAASL,SAASC,cAAc,mBAEtC,SAASK,EAAcC,EAAUJ,GACzBK,MAAAA,EAAgBC,KAAKC,SAAW,GAW/BC,OATS,IAAIC,QAAQ,CAACC,EAASC,KACpCC,WAAW,KACLP,EACFK,EAAQ,6CAERC,EAAO,2CAERP,EAAUJ,KAcjB,SAASa,EAAaC,GACpBA,EAAIC,iBAEE,MACJC,UAAU,MAAEhB,EAAF,KAASC,EAAT,OAAeC,IACvBY,EAAIG,cAEFC,EAAgB,CACpBlB,MAAOA,EAAMmB,MACblB,KAAMA,EAAKkB,MACXjB,OAAQA,EAAOiB,OAGG,KAAhBnB,EAAMmB,OAA+B,KAAflB,EAAKkB,QAC7BC,MAAM,kCACNN,EAAIG,cAAcI,SAGpBC,QAAQC,IAAIL,GAEZf,EAAc,IAAM,KAEpBW,EAAIG,cAAcI,QA/BpBlB,EAAcF,EAAMD,GACjBwB,KAAK,EAAGpB,SAAAA,EAAUJ,MAAAA,MACjBsB,QAAQC,2BAA2BnB,QAAeJ,SAEnDyB,MAAM,EAAGrB,SAAAA,EAAUJ,MAAAA,MAClBsB,QAAQC,0BAA0BnB,QAAeJ,SA6BrDJ,EAAO8B,iBAAiB,SAAUb","file":"03-promises.bb4bf561.js","sourceRoot":"../src","sourcesContent":["\n\nconst formEl = document.querySelector('.form')\nconst buttonEl = document.querySelector('[type=\"submit\"]');\nconst delay = document.querySelector('[name=\"delay\"]');\nconst step = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(\"Success! Value passed to resolve function\");\n      } else {\n        reject(\"Error! Error passed to reject function\");\n      }\n    }, position, delay);\n  });\n  return promise;\n}\n\ncreatePromise(step, delay)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n\n  const formSubmitObj = {\n    delay: delay.value,\n    step: step.value,\n    amount: amount.value,\n  };\n\n  if (delay.value === \"\" || step.value === \"\") {\n    alert(\"Please fill in all the fields!\");\n    evt.currentTarget.reset();\n  }\n\n  console.log(formSubmitObj);\n\n  createPromise(1000, 500);\n\n  evt.currentTarget.reset();\n}\n\nformEl.addEventListener('submit', onFormSubmit);\n\n"]}